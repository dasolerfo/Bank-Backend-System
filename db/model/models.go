// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Currency string

const (
	CurrencyUSD Currency = "USD"
	CurrencyEUR Currency = "EUR"
	CurrencyKRW Currency = "KRW"
	CurrencyJPY Currency = "JPY"
)

func (e *Currency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Currency(s)
	case string:
		*e = Currency(s)
	default:
		return fmt.Errorf("unsupported scan type for Currency: %T", src)
	}
	return nil
}

type NullCurrency struct {
	Currency Currency `json:"Currency"`
	Valid    bool     `json:"valid"` // Valid is true if Currency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCurrency) Scan(value interface{}) error {
	if value == nil {
		ns.Currency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Currency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCurrency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Currency), nil
}

func AllCurrencyValues() []Currency {
	return []Currency{
		CurrencyUSD,
		CurrencyEUR,
		CurrencyKRW,
		CurrencyJPY,
	}
}

type Account struct {
	ID          int64     `json:"id"`
	OwnerID     int64     `json:"owner_id"`
	Currency    Currency  `json:"currency"`
	CreatedAt   time.Time `json:"created_at"`
	Money       int64     `json:"money"`
	CountryCode int32     `json:"country_code"`
}

type Entry struct {
	ID        int64 `json:"id"`
	AccountID int64 `json:"account_id"`
	// Can be negative or positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}

type Owner struct {
	ID                int64     `json:"id"`
	FirstName         string    `json:"first_name"`
	FirstSurname      string    `json:"first_surname"`
	SecondSurname     string    `json:"second_surname"`
	BornAt            time.Time `json:"born_at"`
	Nationality       int32     `json:"nationality"`
	HashedPassword    string    `json:"hashed_password"`
	Email             string    `json:"email"`
	CreatedAt         time.Time `json:"created_at"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	OwnerID      int64     `json:"owner_id"`
	Email        string    `json:"email"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	CreatedAt    time.Time `json:"created_at"`
	ExpiresAt    time.Time `json:"expires_at"`
}

type Transfer struct {
	ID            int64 `json:"id"`
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	// Must be positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}
